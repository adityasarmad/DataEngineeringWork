{
    "Conditions": {
        "2AZs": {
            "Fn::Equals": [
                2,
                {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "azCount"
                    ]
                }
            ]
        },
        "3AZs": {
            "Fn::Equals": [
                3,
                {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "azCount"
                    ]
                }
            ]
        },
        "4AZs": {
            "Fn::Equals": [
                4,
                {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "azCount"
                    ]
                }
            ]
        },
        "AtLeast3AZs": {
            "Fn::Not": [
                {
                    "Condition": "2AZs"
                }
            ]
        },
        "AtLeast4AZs": {
            "Condition": "4AZs"
        },
        "LogArchiveAndNavBucketPresent": {
            "Fn::And": [
                {
                    "Condition": "NavDataBucketPresent"
                },
                {
                    "Condition": "LogArchiveBucketPresent"
                }
            ]
        },
        "LogArchiveBucketPresent": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "LogArchiveBucketName"
                        },
                        ""
                    ]
                }
            ]
        },
        "NavDataBucketPresent": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NavigatorDataBucketName"
                        },
                        ""
                    ]
                }
            ]
        },
        "OnlyLogArchiveBucketPresent": {
            "Fn::And": [
                {
                    "Condition": "LogArchiveBucketPresent"
                },
                {
                    "Fn::Not": [
                        {
                            "Condition": "NavDataBucketPresent"
                        }
                    ]
                }
            ]
        },
        "OnlyNavDataBucketPresent": {
            "Fn::And": [
                {
                    "Condition": "NavDataBucketPresent"
                },
                {
                    "Fn::Not": [
                        {
                            "Condition": "LogArchiveBucketPresent"
                        }
                    ]
                }
            ]
        },
        "PrivateIpsCond": {
            "Fn::Equals": [
                {
                    "Ref": "PublicIps"
                },
                "False"
            ]
        },
        "PublicIpsCond": {
            "Fn::Equals": [
                {
                    "Ref": "PublicIps"
                },
                "True"
            ]
        },
        "S3GuardTableNamePresent": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "S3GuardTableName"
                        },
                        ""
                    ]
                }
            ]
        },
        "StageOrProdExitCIDRs": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        4,
                        {
                            "Fn::FindInMap": [
                                "NetworkProperties",
                                "ExitCIDRs",
                                "count"
                            ]
                        }
                    ]
                }
            ]
        }
    },
    "Description": "Cloudera Altus Template: This template creates all resources necessary for Cloudera Altus to create clusters and run jobs in your AWS account.",
    "Mappings": {
        "NetworkProperties": {
            "ExitCIDRs": {
                "count": 6,
                "list": "52.88.35.116/32,52.37.120.7/32,50.112.20.144/32,34.211.1.60/32,34.210.228.237/32,52.26.206.120/32"
            }
        },
        "RegionMap": {
            "ap-northeast-1": {
                "azCount": 2
            },
            "ap-northeast-2": {
                "azCount": 2
            },
            "ap-south-1": {
                "azCount": 2
            },
            "ap-southeast-1": {
                "azCount": 2
            },
            "ap-southeast-2": {
                "azCount": 3
            },
            "ca-central-1": {
                "azCount": 2
            },
            "eu-central-1": {
                "azCount": 2
            },
            "eu-west-1": {
                "azCount": 3
            },
            "eu-west-2": {
                "azCount": 2
            },
            "sa-east-1": {
                "azCount": 2
            },
            "us-east-1": {
                "azCount": 4
            },
            "us-east-2": {
                "azCount": 3
            },
            "us-west-1": {
                "azCount": 2
            },
            "us-west-2": {
                "azCount": 3
            }
        }
    },
    "Outputs": {
        "ClouderaAltusSubnet1": {
            "Description": "ClouderaAltusSubnet1",
            "Value": {
                "Ref": "Subnet1"
            }
        },
        "ClouderaAltusSubnet2": {
            "Description": "ClouderaAltusSubnet2",
            "Value": {
                "Ref": "Subnet2"
            }
        },
        "ClouderaAltusSubnet3": {
            "Condition": "AtLeast3AZs",
            "Description": "ClouderaAltusSubnet3",
            "Value": {
                "Ref": "Subnet3"
            }
        },
        "ClouderaAltusSubnet4": {
            "Condition": "AtLeast4AZs",
            "Description": "ClouderaAltusSubnet4",
            "Value": {
                "Ref": "Subnet4"
            }
        },
        "DelegatedRoleARN": {
            "Description": "ARN of the delegated role.",
            "Value": {
                "Fn::GetAtt": [
                    "DelegatedRole",
                    "Arn"
                ]
            }
        },
        "InstanceProfileName": {
            "Description": "Name of the instance profile for Cloudera Altus clusters.",
            "Value": {
                "Ref": "InstanceProfile"
            }
        },
        "LogArchiveBucket": {
            "Condition": "LogArchiveBucketPresent",
            "Description": "Name of S3 bucket to archive logs",
            "Value": {
                "Ref": "LogArchiveS3Bucket"
            }
        },
        "NavigatorDataBucket": {
            "Condition": "NavDataBucketPresent",
            "Description": "Name of S3 bucket to store Cloudera Navigator data",
            "Value": {
                "Ref": "NavigatorDataS3Bucket"
            }
        },
        "SSHSecurityGroupId": {
            "Description": "ID of the security group that enables SSH access for Cloudera Altus.",
            "Value": {
                "Ref": "SSHSecurityGroup"
            }
        }
    },
    "Parameters": {
        "ClouderaDelegatedRole": {
            "AllowedPattern": "arn:aws:iam::[0-9]+:role/[A-Za-z]+",
            "Description": "ARN of the role Cloudera Altus will assume in the customer account ",
            "Type": "String"
        },
        "DelegatedRoleName": {
            "Default": "cloudera-cloud-delegated-role",
            "Description": "Name of the role that provides delegated access to the Cloudera Altus account.",
            "Type": "String"
        },
        "ExternalId": {
            "AllowedPattern": "[A-Za-z0-9-]+",
            "Description": "ExternalID of the role that provides delegated access to the Cloudera Altus account.",
            "Type": "String"
        },
        "InstanceProfileRoleName": {
            "Default": "cloudera-cloud-instance-profile-role",
            "Description": "Name of the role that contains the instance profile for EC2 instances in Cloudera Altus clusters.",
            "Type": "String"
        },
        "LogArchiveBucketName": {
            "Default": "",
            "Description": "Name of the S3 bucket where Cloudera Altus cluster and job logs are archived.",
            "Type": "String"
        },
        "NavigatorDataBucketName": {
            "Default": "",
            "Description": "Name of the S3 bucket where Cloudera Navigator data is pushed.",
            "Type": "String"
        },
        "PublicIps": {
            "AllowedValues": [
                "True",
                "False"
            ],
            "Default": "True",
            "Description": "Whether the Cloudera Altus cluster nodes will have public IP addresses or not.",
            "Type": "String"
        },
        "PublicSubnetCidr": {
            "Default": "10.175.0.0/20",
            "Description": "Public Subnet CIDR",
            "Type": "String"
        },
        "S3GuardTableName": {
            "Default": "",
            "Description": "The name of the DynamoDB table that stores theS3Guard Metadata.",
            "Type": "String"
        },
        "SSHToPort": {
            "Default": "22",
            "Description": "Port for Cloudera Altus SSH connections.",
            "Type": "String"
        }
    },
    "Resources": {
        "DelegatedRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Condition": {
                                "StringEquals": {
                                    "sts:ExternalId": {
                                        "Ref": "ExternalId"
                                    }
                                }
                            },
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Ref": "ClouderaDelegatedRole"
                                }
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:DescribeAvailabilityZones",
                                        "ec2:DescribeImages",
                                        "ec2:DescribeInstanceStatus",
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeKeyPairs",
                                        "ec2:DescribePlacementGroups",
                                        "ec2:DescribeRegions",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DescribeNetworkAcls",
                                        "ec2:DescribeSubnets",
                                        "ec2:ImportKeyPair",
                                        "ec2:RunInstances",
                                        "ec2:TerminateInstances",
                                        "ec2:RequestSpotInstances",
                                        "ec2:CancelSpotInstanceRequests",
                                        "ec2:DescribeSpotInstanceRequests",
                                        "ec2:DescribeSpotPriceHistory"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Sid": "clouderaAltusEc2"
                                },
                                {
                                    "Action": [
                                        "iam:GetInstanceProfile",
                                        "iam:PassRole",
                                        "iam:SimulatePrincipalPolicy"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Sid": "clouderaAltusIam"
                                },
                                {
                                    "Action": [
                                        "sts:DecodeAuthorizationMessage"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Sid": "clouderaAltusSts"
                                },
                                {
                                    "Action": [
                                        "s3:GetBucketLocation"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Sid": "clouderaAltusS3"
                                },
                                {
                                    "Action": [
                                        "ec2:DeleteKeyPair",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeVpcAttribute"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Sid": "clouderaAltusEc2Optional"
                                },
                                {
                                    "Action": [
                                        "ec2:DeleteKeyPair",
                                        "ec2:AttachVolume",
                                        "ec2:CreateVolume",
                                        "ec2:DeleteVolume",
                                        "ec2:DetachVolume",
                                        "ec2:DescribeVolumes",
                                        "ec2:DescribeSubnets",
                                        "ec2:ModifyInstanceAttribute",
                                        "kms:Encrypt",
                                        "kms:Decrypt",
                                        "kms:ReEncrypt*",
                                        "kms:GenerateDataKey*",
                                        "kms:Describe*",
                                        "kms:CreateGrant"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Sid": "clouderaAltusKmsEbsVolume"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "DelegatedRoleName"
                                    },
                                    "-policy"
                                ]
                            ]
                        }
                    }
                ],
                "RoleName": {
                    "Ref": "DelegatedRoleName"
                }
            },
            "Type": "AWS::IAM::Role"
        },
        "InstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "InstanceProfileRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "InstanceProfileRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Sid": ""
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3FullAccess"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "Fn::If": [
                            "OnlyLogArchiveBucketPresent",
                            {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "s3:GetObject",
                                                "s3:PutObject",
                                                "s3:DeleteObject"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:aws:s3:::",
                                                        {
                                                            "Ref": "LogArchiveBucketName"
                                                        },
                                                        "/*"
                                                    ]
                                                ]
                                            },
                                            "Sid": "AWSS3Object"
                                        },
                                        {
                                            "Action": [
                                                "s3:ListBucket",
                                                "s3:GetBucketLocation"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:aws:s3:::",
                                                        {
                                                            "Ref": "LogArchiveBucketName"
                                                        }
                                                    ]
                                                ]
                                            },
                                            "Sid": "AWSS3List"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InstanceProfileRoleName"
                                            },
                                            "-Logs-policy"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "OnlyNavDataBucketPresent",
                            {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "s3:GetObject",
                                                "s3:PutObject",
                                                "s3:DeleteObject"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:aws:s3:::",
                                                        {
                                                            "Ref": "NavigatorDataBucketName"
                                                        },
                                                        "/*"
                                                    ]
                                                ]
                                            },
                                            "Sid": "AWSS3Object"
                                        },
                                        {
                                            "Action": [
                                                "s3:ListBucket",
                                                "s3:GetBucketLocation"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        "arn:aws:s3:::",
                                                        {
                                                            "Ref": "NavigatorDataBucketName"
                                                        }
                                                    ]
                                                ]
                                            },
                                            "Sid": "AWSS3List"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InstanceProfileRoleName"
                                            },
                                            "-Nav-policy"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "LogArchiveAndNavBucketPresent",
                            {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "s3:GetObject",
                                                "s3:PutObject",
                                                "s3:DeleteObject"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": [
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "LogArchiveBucketName"
                                                            },
                                                            "/*"
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "NavigatorDataBucketName"
                                                            },
                                                            "/*"
                                                        ]
                                                    ]
                                                }
                                            ],
                                            "Sid": "AWSS3Object"
                                        },
                                        {
                                            "Action": [
                                                "s3:ListBucket",
                                                "s3:GetBucketLocation"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": [
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "LogArchiveBucketName"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:s3:::",
                                                            {
                                                                "Ref": "NavigatorDataBucketName"
                                                            }
                                                        ]
                                                    ]
                                                }
                                            ],
                                            "Sid": "AWSS3List"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InstanceProfileRoleName"
                                            },
                                            "-S3-policy"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "S3GuardTableNamePresent",
                            {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": "dynamodb:*",
                                            "Effect": "Allow",
                                            "Resource": [
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:dynamodb:*:*:table/",
                                                            {
                                                                "Ref": "S3GuardTableName"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:aws:dynamodb:*:*:table/",
                                                            {
                                                                "Ref": "S3GuardTableName"
                                                            },
                                                            "/index/*"
                                                        ]
                                                    ]
                                                }
                                            ],
                                            "Sid": "S3Guard"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Ref": "InstanceProfileRoleName"
                                            },
                                            "-S3Guard-policy"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ],
                "RoleName": {
                    "Ref": "InstanceProfileRoleName"
                }
            },
            "Type": "AWS::IAM::Role"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Cloudera Altus Internet Gateway"
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "InternetGatewayAttachment": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "InternetGatewayRoute": {
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "LogArchiveS3Bucket": {
            "Condition": "LogArchiveBucketPresent",
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Ref": "LogArchiveBucketName"
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "NATGateway": {
            "Condition": "PrivateIpsCond",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatEip",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Cloudera Altus NAT Gateway"
                    }
                ]
            },
            "Type": "AWS::EC2::NatGateway"
        },
        "NatEip": {
            "Condition": "PrivateIpsCond",
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "NatRoute": {
            "Condition": "PrivateIpsCond",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "NavigatorDataS3Bucket": {
            "Condition": "NavDataBucketPresent",
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Ref": "NavigatorDataBucketName"
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "PrivateRouteTable": {
            "Condition": "PrivateIpsCond",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private Route table for Cloudera Altus traffic"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicRouteAssociation": {
            "Condition": "PrivateIpsCond",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PublicSubnet": {
            "Condition": "PrivateIpsCond",
            "Properties": {
                "CidrBlock": {
                    "Ref": "PublicSubnetCidr"
                },
                "MapPublicIpOnLaunch": "true",
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "RouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public Route table for Cloudera Altus traffic"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "S3Endpoint": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "RouteTableIds": [
                    {
                        "Ref": "RouteTable"
                    }
                ],
                "ServiceName": {
                    "Fn::Join": [
                        ".",
                        [
                            "com",
                            "amazonaws",
                            {
                                "Ref": "AWS::Region"
                            },
                            "s3"
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCEndpoint"
        },
        "SSHSecurityGroup": {
            "Properties": {
                "GroupDescription": "Security group that enables SSH access for Cloudera Altus",
                "SecurityGroupIngress": [
                    {
                        "Fn::If": [
                            "PublicIpsCond",
                            {
                                "CidrIp": {
                                    "Fn::Select": [
                                        0,
                                        {
                                            "Fn::Split": [
                                                ",",
                                                {
                                                    "Fn::FindInMap": [
                                                        "NetworkProperties",
                                                        "ExitCIDRs",
                                                        "list"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "FromPort": "22",
                                "IpProtocol": "tcp",
                                "ToPort": {
                                    "Ref": "SSHToPort"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PublicIpsCond",
                            {
                                "CidrIp": {
                                    "Fn::Select": [
                                        1,
                                        {
                                            "Fn::Split": [
                                                ",",
                                                {
                                                    "Fn::FindInMap": [
                                                        "NetworkProperties",
                                                        "ExitCIDRs",
                                                        "list"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "FromPort": "22",
                                "IpProtocol": "tcp",
                                "ToPort": {
                                    "Ref": "SSHToPort"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PublicIpsCond",
                            {
                                "CidrIp": {
                                    "Fn::Select": [
                                        2,
                                        {
                                            "Fn::Split": [
                                                ",",
                                                {
                                                    "Fn::FindInMap": [
                                                        "NetworkProperties",
                                                        "ExitCIDRs",
                                                        "list"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "FromPort": "22",
                                "IpProtocol": "tcp",
                                "ToPort": {
                                    "Ref": "SSHToPort"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PublicIpsCond",
                            {
                                "CidrIp": {
                                    "Fn::Select": [
                                        3,
                                        {
                                            "Fn::Split": [
                                                ",",
                                                {
                                                    "Fn::FindInMap": [
                                                        "NetworkProperties",
                                                        "ExitCIDRs",
                                                        "list"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "FromPort": "22",
                                "IpProtocol": "tcp",
                                "ToPort": {
                                    "Ref": "SSHToPort"
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PublicIpsCond",
                            {
                                "Fn::If": [
                                    "StageOrProdExitCIDRs",
                                    {
                                        "CidrIp": {
                                            "Fn::Select": [
                                                4,
                                                {
                                                    "Fn::Split": [
                                                        ",",
                                                        {
                                                            "Fn::FindInMap": [
                                                                "NetworkProperties",
                                                                "ExitCIDRs",
                                                                "list"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "FromPort": "22",
                                        "IpProtocol": "tcp",
                                        "ToPort": {
                                            "Ref": "SSHToPort"
                                        }
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PublicIpsCond",
                            {
                                "Fn::If": [
                                    "StageOrProdExitCIDRs",
                                    {
                                        "CidrIp": {
                                            "Fn::Select": [
                                                5,
                                                {
                                                    "Fn::Split": [
                                                        ",",
                                                        {
                                                            "Fn::FindInMap": [
                                                                "NetworkProperties",
                                                                "ExitCIDRs",
                                                                "list"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "FromPort": "22",
                                        "IpProtocol": "tcp",
                                        "ToPort": {
                                            "Ref": "SSHToPort"
                                        }
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Cloudera Altus security group"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SSHSecurityGroupInnerGroupIngress": {
            "DependsOn": "SSHSecurityGroup",
            "Properties": {
                "FromPort": "0",
                "GroupId": {
                    "Ref": "SSHSecurityGroup"
                },
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Ref": "SSHSecurityGroup"
                },
                "ToPort": "65535"
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "Subnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": "10.175.128.0/20",
                "MapPublicIpOnLaunch": {
                    "Ref": "PublicIps"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Cloudera Altus subnet for ",
                                    {
                                        "Fn::Select": [
                                            0,
                                            {
                                                "Fn::GetAZs": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet1RouteTableAssociation": {
            "DependsOn": "Subnet1",
            "Properties": {
                "RouteTableId": {
                    "Fn::If": [
                        "PublicIpsCond",
                        {
                            "Ref": "RouteTable"
                        },
                        {
                            "Ref": "PrivateRouteTable"
                        }
                    ]
                },
                "SubnetId": {
                    "Ref": "Subnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Subnet2": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": "10.175.144.0/20",
                "MapPublicIpOnLaunch": {
                    "Ref": "PublicIps"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Cloudera Altus subnet for ",
                                    {
                                        "Fn::Select": [
                                            1,
                                            {
                                                "Fn::GetAZs": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet2RouteTableAssociation": {
            "DependsOn": "Subnet2",
            "Properties": {
                "RouteTableId": {
                    "Fn::If": [
                        "PublicIpsCond",
                        {
                            "Ref": "RouteTable"
                        },
                        {
                            "Ref": "PrivateRouteTable"
                        }
                    ]
                },
                "SubnetId": {
                    "Ref": "Subnet2"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Subnet3": {
            "Condition": "AtLeast3AZs",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        2,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": "10.175.160.0/20",
                "MapPublicIpOnLaunch": {
                    "Ref": "PublicIps"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Cloudera Altus subnet for ",
                                    {
                                        "Fn::Select": [
                                            2,
                                            {
                                                "Fn::GetAZs": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet3RouteTableAssociation": {
            "Condition": "AtLeast3AZs",
            "DependsOn": "Subnet3",
            "Properties": {
                "RouteTableId": {
                    "Fn::If": [
                        "PublicIpsCond",
                        {
                            "Ref": "RouteTable"
                        },
                        {
                            "Ref": "PrivateRouteTable"
                        }
                    ]
                },
                "SubnetId": {
                    "Ref": "Subnet3"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Subnet4": {
            "Condition": "AtLeast4AZs",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        3,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": "10.175.176.0/20",
                "MapPublicIpOnLaunch": {
                    "Ref": "PublicIps"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Cloudera Altus subnet for ",
                                    {
                                        "Fn::Select": [
                                            3,
                                            {
                                                "Fn::GetAZs": {
                                                    "Ref": "AWS::Region"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet4RouteTableAssociation": {
            "Condition": "AtLeast4AZs",
            "DependsOn": "Subnet4",
            "Properties": {
                "RouteTableId": {
                    "Fn::If": [
                        "PublicIpsCond",
                        {
                            "Ref": "RouteTable"
                        },
                        {
                            "Ref": "PrivateRouteTable"
                        }
                    ]
                },
                "SubnetId": {
                    "Ref": "Subnet4"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": "10.175.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Cloudera Altus VPC"
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        }
    }
}